{"name":"expo-image","kind":1,"originalName":"","children":[{"name":"Image","kind":128,"kindString":"Class","children":[{"name":"constructor","kind":512,"kindString":"Constructor","signatures":[{"name":"new Image","kind":16384,"kindString":"Constructor signature","parameters":[{"name":"props","kind":32768,"kindString":"Parameter","type":{"type":"union","types":[{"type":"reference","name":"ImageProps"},{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}]}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.Component<ImageProps>.constructor"}},{"name":"new Image","kind":16384,"kindString":"Constructor signature","comment":{"tags":[{"tag":"deprecated","text":""},{"tag":"see","text":"https://reactjs.org/docs/legacy-context.html\n"}]},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageProps"}},{"name":"context","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.Component<ImageProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<ImageProps>.constructor"}},{"name":"context","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"shortText":"If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.","text":"```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n","tags":[{"tag":"see","text":"https://reactjs.org/docs/context.html\n"}]},"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"React.Component.context"}},{"name":"props","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isReadonly":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"React.Component.props"}},{"name":"refs","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"tags":[{"tag":"deprecated","text":"\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","qualifiedName":"React.ReactInstance","package":"@types/react","name":"ReactInstance"}}}},"inheritedFrom":{"type":"reference","name":"React.Component.refs"}},{"name":"state","kind":1024,"kindString":"Property","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal"}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"},"inheritedFrom":{"type":"reference","name":"React.Component.state"}},{"name":"contextType","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isOptional":true},"comment":{"shortText":"If set, `this.context` will be set at runtime to the current value of the given Context.","text":"Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n","tags":[{"tag":"see","text":"https://reactjs.org/docs/context.html#classcontexttype\n"}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"qualifiedName":"React.Context","package":"@types/react","name":"Context"},"inheritedFrom":{"type":"reference","name":"React.Component.contextType"}},{"name":"UNSAFE_componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.","text":"This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use componentDidMount or the constructor instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"}},{"name":"UNSAFE_componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.","text":"Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use static getDerivedStateFromProps instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"}},{"name":"UNSAFE_componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before rendering when new props or state is received. Not called for the initial render.","text":"Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use getSnapshotBeforeUpdate instead"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"}},{"name":"componentDidCatch","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidCatch","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."},"parameters":[{"name":"error","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"Error","package":"typescript","name":"Error"}},{"name":"errorInfo","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","qualifiedName":"React.ErrorInfo","package":"@types/react","name":"ErrorInfo"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"}},{"name":"componentDidMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately after a component is mounted. Setting state here will trigger re-rendering."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"}},{"name":"componentDidUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately after updating occurs. Not called for the initial render.","text":"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"snapshot","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"}},{"name":"componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.","text":"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use componentDidMount or the constructor instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"}},{"name":"componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.","text":"Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use static getDerivedStateFromProps instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"}},{"name":"componentWillUnmount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUnmount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"}},{"name":"componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called immediately before rendering when new props or state is received. Not called for the initial render.","text":"Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n","tags":[{"tag":"deprecated","text":"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"tag":"see","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"}},{"name":"forceUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"forceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"}},{"name":"getSnapshotBeforeUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"getSnapshotBeforeUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.","text":"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"}},{"name":"render","kind":2048,"kindString":"Method","signatures":[{"name":"render","kind":4096,"kindString":"Call signature","type":{"type":"reference","qualifiedName":"global.JSX.Element","package":"@types/react","name":"Element"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"name":"setState","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"setState","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"typeParameter":[{"name":"K","kind":131072,"kindString":"Type parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"state","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","qualifiedName":"K","package":"@types/react","name":"K"}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}]}}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","qualifiedName":"K","package":"@types/react","name":"K"}],"qualifiedName":"Pick","package":"typescript","name":"Pick"}]}},{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.setState"}}],"inheritedFrom":{"type":"reference","name":"React.Component.setState"}},{"name":"shouldComponentUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"shouldComponentUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"shortText":"Called to determine whether the change in props and state should trigger a re-render.","text":"`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"qualifiedName":"Readonly","package":"typescript","name":"Readonly"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"}},{"name":"prefetch","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"prefetch","kind":4096,"kindString":"Call signature","comment":{"shortText":"**Available on @Android only.** Caching the image that can be later used in ImageView","returns":"an empty promise.\n"},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"qualifiedName":"React.Component","package":"@types/react","name":"Component"}]},{"name":"ImageContentFit","kind":8,"kindString":"Enumeration","comment":{"shortText":"Determines how the image should be resized to fit its container."},"children":[{"name":"CONTAIN","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image is scaled down or up to maintain its aspect ratio while fitting within the container box."},"defaultValue":"\"contain\""},{"name":"COVER","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image is sized to maintain its aspect ratio while filling the container box.\nIf the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit."},"defaultValue":"\"cover\""},{"name":"FILL","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit."},"defaultValue":"\"fill\""},{"name":"NONE","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image is not resized and is centered by default.\nWhen specified, the exact position can be controlled with [`contentPosition`](#contentposition) prop."},"defaultValue":"\"none\""},{"name":"SCALE_DOWN","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image is sized as if `none` or `contain` were specified, whichever would result in a smaller concrete image size."},"defaultValue":"\"scale-down\""}]},{"name":"ImageContentPosition","kind":4194304,"kindString":"Type alias","comment":{"tags":[{"tag":"docsmissing","text":"\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageContentPositionString"},{"type":"reference","name":"ImageContentPositionObject"}]}},{"name":"ImageContentPositionObject","kind":4194304,"kindString":"Type alias","comment":{"shortText":"Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis."},"type":{"type":"union","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","comment":{"shortText":"An object that positions the image relatively to the top-right corner."},"children":[{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","comment":{"shortText":"An object that positions the image relatively to the top-left corner."},"children":[{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","comment":{"shortText":"An object that positions the image relatively to the bottom-right corner."},"children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","comment":{"shortText":"An object that positions the image relatively to the bottom-left corner."},"children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}}]}},{"name":"ImageContentPositionString","kind":4194304,"kindString":"Type alias","comment":{"shortText":"A stringified and shorthand form of the `contentPosition` prop. This specifies the edges to which to align the image content.\nIf only one keyword is provided, the other dimension is then set to `'50%'`, so the image is placed in the middle of the edge specified."},"type":{"type":"union","types":[{"type":"literal","value":"center"},{"type":"literal","value":"top"},{"type":"literal","value":"right"},{"type":"literal","value":"bottom"},{"type":"literal","value":"left"},{"type":"literal","value":"top center"},{"type":"literal","value":"top right"},{"type":"literal","value":"top left"},{"type":"literal","value":"right center"},{"type":"literal","value":"right top"},{"type":"literal","value":"right bottom"},{"type":"literal","value":"bottom center"},{"type":"literal","value":"bottom right"},{"type":"literal","value":"bottom left"},{"type":"literal","value":"left center"},{"type":"literal","value":"left top"},{"type":"literal","value":"left bottom"}]}},{"name":"ImageContentPositionValue","kind":4194304,"kindString":"Type alias","comment":{"shortText":"A value that represents the relative position of a single axis.","text":"If it is a number, it is a distance in points (logical pixels) from the respective edge.\n\nA string must be a percentage where `'100%'` is the difference in size between the container and the image along the respective axis,\nor `'center'` which is an alias for `'50%'` that is the default value. You can read more regarding percentages on the MDN docs for\n[`background-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well.\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},"%"]]},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},""]]},{"type":"literal","value":"center"}]}},{"name":"ImageErrorEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"error","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}}]}}},{"name":"ImageLoadEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"cacheType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"}]}},{"name":"source","kind":1024,"kindString":"Property","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"height","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"mediaType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"url","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"ImageProgressEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"loaded","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"total","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageProps","kind":4194304,"kindString":"Type alias","type":{"type":"intersection","types":[{"type":"reference","qualifiedName":"AccessibilityProps","package":"@types/react-native","name":"AccessibilityProps"},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"cacheType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Determines whether to cache the image and where: on the disk, in the memory or both.\n> Note: Memory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.","tags":[{"tag":"default","text":"'disk'\n"}]},"type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memoryAndDisk"},{"type":"literal","value":null}]}},{"name":"contentFit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Determines how the image should be resized to fit its container. This property tells the image to fill the container\nin a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nIt mirrors the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.","tags":[{"tag":"default","text":"\"cover\"\n"}]},"type":{"type":"reference","name":"ImageContentFit"}},{"name":"contentPosition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"It is used together with [`contentFit`](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\nAn equivalent of the CSS [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property.","tags":[{"tag":"default","text":"\"center\"\n"}]},"type":{"type":"reference","name":"ImageContentPosition"}},{"name":"defaultSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"tags":[{"tag":"deprecated","text":"Provides compatibility for [React Native Image](https://reactnative.dev/docs/image#defaultsource) prop.\nUse [`placeholder`](#placeholder-1) prop instead.\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"literal","value":null}]}},{"name":"loadingIndicatorSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"tags":[{"tag":"deprecated","text":"Provides compatibility for [React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource) prop.\nUse [`placeholder`](#placeholder-1) prop instead.\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"literal","value":null}]}},{"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An image to display while loading the proper image and no image has been displayed yet or the source is unset."},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}},{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Priorities for completing loads. If more than one load is queued at a time,\nthe load with the higher priority will be started first.\nPriorities are considered best effort, there are no guarantees about the order in which loads will start or finish.","tags":[{"tag":"default","text":"'normal'\n"}]},"type":{"type":"union","types":[{"type":"literal","value":"low"},{"type":"literal","value":"normal"},{"type":"literal","value":"high"},{"type":"literal","value":null}]}},{"name":"resizeMode","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"tags":[{"tag":"deprecated","text":"Provides compatibility for [React Native Image](https://reactnative.dev/docs/image#resizemode) prop,\nhowever `\"repeat\"` option is not supported at all.\nUse the more powerful [`contentFit`](#contentfit) and [`contentPosition`](#contentposition) props instead.\n"}]},"type":{"type":"reference","name":"ImageResizeMode"}},{"name":"source","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The image source, either a remote URL, a local file resource or a number that is the result of the `require()` function.\nWhen provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\nwill be chosen. In this case it is important to provide `width`, `height` and `scale` properties."},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}},{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"name":"transition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Object that describes how the image view should transition the contents on props change.","tags":[{"tag":"platform","text":"ios\n"}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageTransition"},{"type":"literal","value":null}]}},{"name":"onError","kind":2048,"kindString":"Method","flags":{"isOptional":true},"signatures":[{"name":"onError","kind":4096,"kindString":"Call signature","comment":{"shortText":"Called on an image fetching error."},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageErrorEventData"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"onLoad","kind":2048,"kindString":"Method","flags":{"isOptional":true},"signatures":[{"name":"onLoad","kind":4096,"kindString":"Call signature","comment":{"shortText":"Called when the image load completes successfully."},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageLoadEventData"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"onLoadEnd","kind":2048,"kindString":"Method","flags":{"isOptional":true},"signatures":[{"name":"onLoadEnd","kind":4096,"kindString":"Call signature","comment":{"shortText":"Called when the image load either succeeds or fails."},"type":{"type":"intrinsic","name":"void"}}]},{"name":"onLoadStart","kind":2048,"kindString":"Method","flags":{"isOptional":true},"signatures":[{"name":"onLoadStart","kind":4096,"kindString":"Call signature","comment":{"shortText":"Called when the image starts to load."},"type":{"type":"intrinsic","name":"void"}}]},{"name":"onProgress","kind":2048,"kindString":"Method","flags":{"isOptional":true},"signatures":[{"name":"onProgress","kind":4096,"kindString":"Call signature","comment":{"shortText":"Called when the image is loading. Can be called multiple times before the image has finished loading.\nThe event object provides details on how many bytes were loaded so far and what's the expected total size."},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageProgressEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}]}}]}},{"name":"ImageResizeMode","kind":8,"kindString":"Enumeration","comment":{"tags":[{"tag":"deprecated","text":"The resize mode is deprecated in favor of `ImageContentFit` and `contentFit` prop.\n"}]},"children":[{"name":"CENTER","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image will be scaled down such that it is completely visible,\nif bigger than the area of the view. The image will not be scaled up."},"defaultValue":"\"center\""},{"name":"CONTAIN","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image will be resized such that it will be completely\nvisible, contained within the frame of the view."},"defaultValue":"\"contain\""},{"name":"COVER","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image will be resized such that the entire area of the view\nis covered by the image, potentially clipping parts of the image."},"defaultValue":"\"cover\""},{"name":"REPEAT","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image will be repeated to cover the frame of the view.\nThe image will keep its size and aspect ratio."},"defaultValue":"\"repeat\""},{"name":"STRETCH","kind":16,"kindString":"Enumeration member","comment":{"shortText":"The image will be stretched to fill the entire frame of the view without clipping.\nThis may change the aspect ratio of the image, distorting it.","tags":[{"tag":"platform","text":"ios\n"}]},"defaultValue":"\"stretch\""}]},{"name":"ImageSource","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"headers","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"An object representing the HTTP headers to send along with the request for a remote image."},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}}}},{"name":"height","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Can be specified if known at build time, in which case the value\nwill be used to set the default `<Image/>` component dimension"},"type":{"type":"intrinsic","name":"number"}},{"name":"uri","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"A string representing the resource identifier for the image,\nwhich could be an http address, a local file path, or the name of a static image resource."},"type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Can be specified if known at build time, in which case the value\nwill be used to set the default `<Image/>` component dimension"},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageTransition","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"duration","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"effect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageTransitionEffect"}},{"name":"timing","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageTransitionTiming"}}]}}},{"name":"ImageTransitionEffect","kind":8,"kindString":"Enumeration","children":[{"name":"CROSS_DISOLVE","kind":16,"kindString":"Enumeration member","defaultValue":"1"},{"name":"CURL_DOWN","kind":16,"kindString":"Enumeration member","defaultValue":"7"},{"name":"CURL_UP","kind":16,"kindString":"Enumeration member","defaultValue":"6"},{"name":"FLIP_FROM_BOTTOM","kind":16,"kindString":"Enumeration member","defaultValue":"5"},{"name":"FLIP_FROM_LEFT","kind":16,"kindString":"Enumeration member","defaultValue":"2"},{"name":"FLIP_FROM_RIGHT","kind":16,"kindString":"Enumeration member","defaultValue":"3"},{"name":"FLIP_FROM_TOP","kind":16,"kindString":"Enumeration member","defaultValue":"4"},{"name":"NONE","kind":16,"kindString":"Enumeration member","defaultValue":"0"}]},{"name":"ImageTransitionTiming","kind":8,"kindString":"Enumeration","children":[{"name":"EASE_IN","kind":16,"kindString":"Enumeration member","defaultValue":"2"},{"name":"EASE_IN_OUT","kind":16,"kindString":"Enumeration member","defaultValue":"1"},{"name":"EASE_OUT","kind":16,"kindString":"Enumeration member","defaultValue":"3"},{"name":"LINEAR","kind":16,"kindString":"Enumeration member","defaultValue":"4"}]}]}